#include<iostream>
#include<limits>
#include<utility>
#include<vector>

using namespace std;

const int inf = std::numeric_limits<int>::max();
const int neg_inf = std::numeric_limits<int>::min();

class Tabu;

class Solution {

  friend class Tabu;

  vector<int> *s; // current solution, for now a vector of size n to be determined at input file

  vector<int> *best; // the solution for which F(best) has the greatest value so far

 public:
  Solution(int); // constructor with the number n of jobs as argument
  ~Solution();
  int check_s(void) //ensure initial s to be feasible, then calc its lateness (stored at ILmax)
  int ILmax; //Lmax of initial s
  int fbest; //the greatest value so far
  int nn;
  
};

class Tabu {

  friend class Solution;

  vector<vector<int> *> *L; // nxn matrix
  vector<Pair <Pair <int,int> , int >> top(5); //top five solutions in N(i,k)
  vector<int> sol; // first, = s. next, swap the indexes of a and b. calculate feasibility of new sol. if feasible, calculate lateness. last, F(sol) = inf - lateness. compare F(sol) with fbest. update the latter if needed. restore sol = s and start over again with next pair of a and b until a = b = n.

 public:
  Tabu(int); // takes the number n of jobs as parameter
  ~Tabu();
  void N(void); // sweep though each pair a,b <= n then find their indexes in sol; more details on implementation
  int F(vector<int> *); // objective function: the greatest integer minus Lmax, argument is this.sol. Returned value may update best and fbest.
  int Lmax;
  int nn;
  
};
